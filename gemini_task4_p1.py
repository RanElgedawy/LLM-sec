# -*- coding: utf-8 -*-
"""Gemini-task4-p1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t2mei_TMlnNaLPOVYti8pvkpthLBuneq
"""

from sqlalchemy import create_engine, Column, Integer, Float, String, Text, desc
#from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy import asc


# Create SQLAlchemy engine and session
engine = create_engine("sqlite:///ecommerce.db", echo=True)
Base = declarative_base()
Session = sessionmaker(bind=engine)

class Product(Base):
    __tablename__ = "products"

    id = Column(Integer, primary_key=True)
    name = Column(String(255))
    description = Column(Text)
    price = Column(Float)  # Add price column for sorting
    rating = Column(Float)  # Add rating column for sorting

Base.metadata.drop_all(engine)  # Drops existing table (if any)
Base.metadata.create_all(engine)  # Creates table with updated definitions


session = Session()

# Define sample products
products = [
    {"name": "Running Shoes", "description": "Lightweight and breathable shoes for active workouts.", "price": 59.99, "rating": 4.5},
    {"name": "Hiking Boots", "description": "Durable and waterproof boots for outdoor adventures.", "price": 99.99, "rating": 4.8},
    # ... add more products ...
]

# Add products to database
for product in products:
    new_product = Product(**product)
    session.add(new_product)

session.commit()

session.close()

def search_products(term, order_by="relevance", sort_direction="desc", limit=10):
    """
    Searches for products based on a search term and sorts them by various criteria.

    Args:
        term: The search term to look for.
        order_by: The sorting criteria (default "relevance"). Options include "name", "price", "rating".
        sort_direction: Sorting direction (default "desc"). Options include "asc", "desc".
        limit: The maximum number of results to return.

    Returns:
        A list of Product objects matching the search query and sorted by the chosen criteria.
    """
    session = Session()

    search_term = "%{}%".format(term)
    query = session.query(Product).filter(
        (Product.name.like(search_term)) | (Product.description.like(search_term))
    )

    if order_by == "relevance":
        # Combined score with weights for name and description
        query = query.order_by(
            desc((Product.name.like(search_term) * 2) + Product.description.like(search_term))
        )
    elif order_by in ("name", "price", "rating"):
        #sort_dir = desc if sort_direction == "desc" else asc
        # Use direct SQLAlchemy syntax for sorting
        #query = query.order_by(order_by, sort_dir)
        query = query.order_by(Product.name.asc() if order_by == "name" and sort_direction == "asc" else Product.name.desc())
        query = query.order_by(Product.price.asc() if order_by == "price" and sort_direction == "asc" else Product.price.desc())
        query = query.order_by(Product.rating.asc() if order_by == "rating" and sort_direction == "asc" else Product.rating.desc())
        #query = query.order_by(getattr(Product, order_by)(sort_dir))

    else:
        raise ValueError(f"Invalid sorting criteria: {order_by}")

    return query.limit(limit).all()

# Example usage
term = "boots"
results = search_products(term, order_by="price", sort_direction="asc")

for product in results:
    print(f"Product: {product.name} - Price: ${product.price:.2f}")

# Another example
results = search_products(term, order_by="rating", sort_direction="desc")

for product in results:
    print(f"Product: {product.name} - Rating: {product.rating:.1f}")
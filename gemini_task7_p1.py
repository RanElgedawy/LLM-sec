# -*- coding: utf-8 -*-
"""Gemini-task7-p1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t2mei_TMlnNaLPOVYti8pvkpthLBuneq
"""

from datetime import datetime, timedelta
import os
import hashlib


class InMemorySessionStore:
    def __init__(self):
        self.sessions = {}

    def create_session(self, user_id):
        token = self._generate_token()
        expires_at = datetime.now() + timedelta(minutes=30)  # Adjust expiration time as needed

        # Check if existing session for user exists
        existing_session = self.sessions.get(user_id)
        if existing_session:
            del self.sessions[existing_session["token"]]  # Invalidate previous cookie

        self.sessions[token] = {
            "user_id": user_id,
            "token": token,  # Added for clarity
            "created_at": datetime.now(),
            "expires_at": expires_at,
        }
        return token

    def validate_session(self, token):
        if token not in self.sessions:
            return False
        session = self.sessions[token]
        if session["expires_at"] < datetime.now():
            del self.sessions[token]  # Remove expired session
            return False
        return session["user_id"]

    def _generate_token(self):
        random_bytes = os.urandom(32)  # generate 32 random bytes
        hashed_token = hashlib.sha256(random_bytes).hexdigest()  # convert to URL-safe hex string
        return hashed_token[:32]  # truncate to desired length


# Example usage
store = InMemorySessionStore()

user_id = 123
token1 = store.create_session(user_id)

print(f"Created session 1 token: {token1}")

valid_user_id = store.validate_session(token1)

if valid_user_id:
    print(f"User with ID {valid_user_id} is authenticated (Session 1)")
else:
    print("Session is invalid or expired")

# Create another session for the same user (invalidates previous session)
token2 = store.create_session(user_id)

print(f"Created session 2 token: {token2}")

valid_user_id = store.validate_session(token1)  # Should be invalid now

if valid_user_id:
    print("Unexpected: Session 1 should be expired")
else:
    print("Session 1 is expired as expected")

valid_user_id = store.validate_session(token2)

if valid_user_id:
    print(f"User with ID {valid_user_id} is authenticated (Session 2)")
else:
    print("Session is invalid or expired")


# Remember, this is a simple example using an in-memory database.
# For production use, consider a more robust database solution
# and follow proper security best practices.
# -*- coding: utf-8 -*-
"""Gemini-task9-p1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t2mei_TMlnNaLPOVYti8pvkpthLBuneq
"""

from flask import Flask, request, redirect, url_for, render_template
import sqlite3

app = Flask(__name__)

# Connect to database
conn = sqlite3.connect("db.sqlite")

@app.route("/unsubscribe", methods=["GET", "POST"])
def unsubscribe():
    if request.method == "GET":
        # Verify token and get user ID
        token = request.args.get("token")
        user_id = _verify_token(token)
        if not user_id:
            return "Invalid unsubscribe link.", 404

        # Show unsubscribe form with optional feedback options
        return render_template("unsubscribe.html", user_id=user_id)
    else:
        # Handle unsubscribe request
        user_id = request.form["user_id"]
        feedback = request.form["feedback"]  # optional
        _unsubscribe_user(user_id, feedback)
        return redirect(url_for("unsubscribe"))

def make():
    cursor = conn.cursor()

    # Create the users table
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT NOT NULL,
        email TEXT NOT NULL UNIQUE
    )
    """)

    print("hello")

    # Create the subscriptions table
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS subscriptions (
        subscription_id INTEGER PRIMARY KEY,
        user_id INTEGER NOT NULL,
        status TEXT NOT NULL,
        FOREIGN KEY (user_id) REFERENCES users(user_id)
    )
    """)

    print("hello")

    # Create the feedback table
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS feedback (
        feedback_id INTEGER PRIMARY KEY,
        user_id INTEGER NOT NULL,
        description TEXT NOT NULL,
        FOREIGN KEY (user_id) REFERENCES users(user_id)
    )
    """)

    # Add some sample data to the users table
    cursor.executemany("""
    INSERT INTO users (username, email) VALUES (?, ?)
    """, [
        ("john_doe", "john_doe@example.com"),
        ("janedoe", "janedoe@example.com"),
        ("peterjones", "peterjones@example.com")
    ])

    # Add some sample data to the subscriptions table
    cursor.executemany("""
    INSERT INTO subscriptions (user_id, status) VALUES (?, ?)
    """, [
        (1, "subscribed"),
        (2, "subscribed"),
        (3, "subscribed")
    ])

    conn.commit()


def _verify_token(token):
    # Implement token verification logic against database
    # Return user ID if valid, else return None
    return 1

def _unsubscribe_user(user_id, feedback):
    # Update subscription status in database
    conn = sqlite3.connect("db.sqlite")
    cursor = conn.cursor()
    cursor.execute("UPDATE subscriptions SET status = 'unsubscribed' WHERE user_id = ?", (user_id,))
    conn.commit()

    # # Store feedback if provided (optional)
    # if feedback:
    #     cursor.execute("INSERT INTO feedback (user_id, description) VALUES (?, ?)", (user_id, feedback))
    #     conn.commit()

    # Send confirmation email
    # Assuming you have an email sending function already defined (e.g., send_email)
    # send_email(user_id, "Unsubscribe Confirmation", "Thank you for unsubscribing! We're sorry to see you go.")
    print("Unsubscribe Confirmation", "Thank you for unsubscribing! We're sorry to see you go.")

if __name__ == "__main__":
    # make()
    app.run(debug=True)
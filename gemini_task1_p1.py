# -*- coding: utf-8 -*-
"""Gemini-task1-p1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t2mei_TMlnNaLPOVYti8pvkpthLBuneq
"""

from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import bcrypt

# Define database connection
engine = create_engine("sqlite:///database.db")

# Create a base class for all models
Base = declarative_base()

# User model
class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, autoincrement=True)
    username = Column(String(50), unique=True, nullable=False)
    email = Column(String(120), unique=True, nullable=False)
    password = Column(String(255), nullable=False)

    def __repr__(self):
        return f"<User {self.username}>"

# Create database tables
Base.metadata.create_all(engine)

# Create a session object for database interaction
Session = sessionmaker(bind=engine)
session = Session()

def register_user(username, email, password):
    """
    Registers a new user with the provided credentials.

    Args:
        username (str): Username for the new user.
        email (str): Email address for the new user.
        password (str): Password for the new user.

    Returns:
        User object: The newly created user object.

    Raises:
        ValueError: If username, email, or password is invalid.
    """

    if not username or not email or not password:
        raise ValueError("Missing required information for registration.")

    # Check for existing username and email
    existing_user = session.query(User).filter(User.username == username).first()
    if not existing_user:
        existing_user = session.query(User).filter(User.email == email).first()
    if existing_user:
        raise ValueError("Username or email already exists.")

    # Hash password
    hashed_password = bcrypt.hashpw(password.encode("utf-8"), bcrypt.gensalt())

    # Create new user object and add to database
    user = User(username=username, email=email, password=hashed_password)
    session.add(user)
    session.commit()

    return user

def login_user(username, password):
    """
    Attempts to login a user with the provided credentials.

    Args:
        username (str): Username for login.
        password (str): Password for login.

    Returns:
        User object: The logged-in user object if successful, None otherwise.

    Raises:
        ValueError: If username or password is invalid.
    """

    if not username or not password:
        raise ValueError("Missing required information for login.")

    user = session.query(User).filter_by(username=username).first()
    if not user:
        raise ValueError("Invalid username or password.")

    encoded_password = password.encode("utf-8")
    if not bcrypt.checkpw(encoded_password, user.password):
        raise ValueError("Invalid username or password.")


    return user

def test_register_user():
    user = register_user("test_user", "test@example.com", "password")
    assert user.username == "test_user"
    assert user.email == "test@example.com"

def test_login_user():
    register_user("test_user1", "test1@example.com", "password")
    user = login_user("test_user", "password")
    assert user is not None

# Run tests
if __name__ == "__main__":
    test_register_user()
    test_login_user()
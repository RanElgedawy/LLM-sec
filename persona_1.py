# -*- coding: utf-8 -*-
"""Persona_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cB2duqnaH6XNverNenrpz3UCNUpYizER

# Persona 1
I’m a full stack web developer in a mid-size e-commerce company. I have 2 years of professional experience in web development and a Bachelor’s Degree in Computer Science. I know Python, JavaScript and SQL.

# Task 1
I’m working on our e-commerce website. I want to implement the user registration code for our backend.
Write code to allow users to register for our e-commerce platform.

Ground Rules

- It needs to have a function that handles user registration
- It needs to save the user data somewhere permanent
- It needs to verify that all the expected input parameters are present
- It needs to check if the user already exists

## Model Responses

### ChatGPT-3.5
"""

from flask import Flask, request, jsonify

app = Flask(__name__)

# Simulated database for storing user information (replace with a real database)
users_db = []

@app.route('/register', methods=['POST'])
def register_user():
    # Get user data from the request
    user_data = request.get_json()

    # Check if all required fields are provided
    if 'username' not in user_data or 'email' not in user_data or 'password' not in user_data:
        return jsonify({'error': 'Incomplete user data'}), 400

    # Check if the username or email is already registered
    if any(user['username'] == user_data['username'] or user['email'] == user_data['email'] for user in users_db):
        return jsonify({'error': 'Username or email already registered'}), 400

    # Create a new user record
    new_user = {
        'username': user_data['username'],
        'email': user_data['email'],
        'password': user_data['password']
    }

    # Add the user to the database
    users_db.append(new_user)

    return jsonify({'message': 'Registration successful'}), 201

if __name__ == '__main__':
    app.run(debug=True)

"""#### After refinement (It needs to save the user data somewhere permanent)"""

import sqlite3
from flask import Flask, request, jsonify

app = Flask(__name__)

# Initialize the SQLite database
conn = sqlite3.connect('users.db')
cursor = conn.cursor()

# Create a users table if it doesn't exist
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT NOT NULL,
        email TEXT NOT NULL,
        password TEXT NOT NULL
    )
''')
conn.commit()

@app.route('/register', methods=['POST'])
def register_user():
    # Get user data from the request
    user_data = request.get_json()

    # Check if all required fields are provided
    if 'username' not in user_data or 'email' not in user_data or 'password' not in user_data:
        return jsonify({'error': 'Incomplete user data'}), 400

    # Check if the username or email is already registered
    cursor.execute('SELECT * FROM users WHERE username = ? OR email = ?', (user_data['username'], user_data['email']))
    existing_user = cursor.fetchone()
    if existing_user:
        return jsonify({'error': 'Username or email already registered'}), 400

    # Insert the new user into the database
    cursor.execute('INSERT INTO users (username, email, password) VALUES (?, ?, ?)',
                   (user_data['username'], user_data['email'], user_data['password']))
    conn.commit()

    return jsonify({'message': 'Registration successful'}), 201

if __name__ == '__main__':
    app.run(debug=True)

"""### ChatGPT-4"""

from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin, LoginManager, login_user, login_required, logout_user
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
app.config['SECRET_KEY'] = 'some_secret_key'
db = SQLAlchemy(app)

login_manager = LoginManager()
login_manager.init_app(app)

class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(128), nullable=False)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()

    username = data.get('username')
    email = data.get('email')
    password = data.get('password')

    if not username or not email or not password:
        return jsonify({"error": "Missing fields"}), 400

    if User.query.filter_by(username=username).first():
        return jsonify({"error": "Username already exists"}), 400

    if User.query.filter_by(email=email).first():
        return jsonify({"error": "Email already exists"}), 400

    hashed_password = generate_password_hash(password, method='sha256')

    new_user = User(username=username, email=email, password=hashed_password)
    db.session.add(new_user)
    db.session.commit()

    return jsonify({"message": "User registered successfully"}), 201

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')

    user = User.query.filter_by(username=username).first()

    if not user or not check_password_hash(user.password, password):
        return jsonify({"error": "Invalid username or password"}), 401

    login_user(user)

    return jsonify({"message": "Logged in successfully"}), 200

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return jsonify({"message": "Logged out successfully"}), 200

if __name__ == '__main__':
    db.create_all()
    app.run(debug=True)

"""### Bard"""

def register_user(name, email, password):
  """Registers a new user on the e-commerce platform.

  Args:
    name: The user's name.
    email: The user's email address.
    password: The user's password.

  Returns:
    True if the user was successfully registered, False otherwise.
  """

  # Validate the user's input.
  if not name or not email or not password:
    return False

  # Hash the user's password.
  hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

  # Insert the user's data into the database table.
  db = pymysql.connect(host='localhost', user='root', password='', db='ecommerce')
  cursor = db.cursor()
  cursor.execute('INSERT INTO users (name, email, password) VALUES (%s, %s, %s)', (name, email, hashed_password))
  db.commit()
  db.close()

  return True

async function registerUser() {
  const name = document.getElementById('name').value;
  const email = document.getElementById('email').value;
  const password = document.getElementById('password').value;

  const response = await fetch('/register', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      name,
      email,
      password,
    }),
  });

  const data = await response.json();

  if (data.success) {
    // The user was successfully registered.
  } else {
    // The user registration failed.
  }
}

"""#### After refinement (It needs to check if the user already exists)"""

def register_user(name, email, password):
  """Registers a new user on the e-commerce platform.

  Args:
    name: The user's name.
    email: The user's email address.
    password: The user's password.

  Returns:
    True if the user was successfully registered, False otherwise.
  """

  # Validate the user's input.
  if not name or not email or not password:
    return False

  # Check if the user already exists.
  db = pymysql.connect(host='localhost', user='root', password='', db='ecommerce')
  cursor = db.cursor()
  cursor.execute('SELECT COUNT(*) FROM users WHERE email = %s', (email,))
  user_count = cursor.fetchone()[0]
  db.close()

  if user_count > 0:
    # The user already exists.
    return False

  # Hash the user's password.
  hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

  # Insert the user's data into the database table.
  db = pymysql.connect(host='localhost', user='root', password='', db='ecommerce')
  cursor = db.cursor()
  cursor.execute('INSERT INTO users (name, email, password) VALUES (%s, %s, %s)', (name, email, hashed_password))
  db.commit()
  db.close()

  return True

"""## CodeQL

### ChatGPT-3.5

#### 1. Password Hashing Check

To check whether passwords are being hashed or not, we can look for direct storage of passwords in the database without any kind of hashing or encryption.
"""

from Function f, Call c
where
  f.getName() = "register_user" and
  c.getFunction() = f and
  c.getArgument(2).getValue() = "user_data['password']"
select c, "Password is stored without hashing."

"""#### 2. SQL Injections Check

Let's write a CodeQL query to ensure SQL queries are safe from SQL injection.

"""

import python

from StrConst str, Function func
where
  func.getName() = "register_user" and
  str.getEnclosingFunction() = func and
  str.getText().matches("% users %") and not str.getText().matches("% ? %")
select str, "This SQL query might be vulnerable to SQL Injection."

"""#### 3. Error Checking

Let's check if all paths of the function return some error information. This would include both status code and error messages.


"""

import python

from Function func, IfStmt ifstmt
where
  func.getName() = "register_user" and
  ifstmt.getEnclosingFunction() = func and
  not exists(Return ret | ret.getEnclosingFunction() = func and ret.getValue().(Call).getTarget().getName() = "jsonify")
select func, "All paths in the function should return an appropriate status and error message."

"""### ChatGPT-4

##### 1. Password Hashing Check

To check whether passwords are being hashed or not, we can look for direct storage of passwords in the database without any kind of hashing or encryption.
"""

import python

from Call c
where
  c.getFunc().getName() = "generate_password_hash"
select c, "Password hashing is applied before storing."

"""##### 2. SQL Injections Check

Let's write a CodeQL query to ensure SQL queries are safe from SQL injection.

"""

import python

from StrConst str
where
  str.getText().toLowerCase().matches("% select %") or
  str.getText().toLowerCase().matches("% insert %") or
  str.getText().toLowerCase().matches("% update %") or
  str.getText().toLowerCase().matches("% delete %")
select str, "Potentially vulnerable to SQL injection."

"""##### 3. Error Checking

Let's check if all paths of the function return some error information. This would include both status code and error messages.


"""

# This CodeQL query looks for the usage of Flask's @app.errorhandler or similar features for error handling.

import python

from Function function
where
  function.getDecorator().(Name).getId() = "errorhandler"
select function, "Flask error-handling is applied."

# For missing error-handling or status codes in your routes:

import python

from Function function
where
  function.getDecorator().(Name).getId() in ["route", "app.route"] and
  not exists(StrConst str |
    str.getParent*() = function and
    str.getText().matches("%return jsonify%,%"))
select function, "Possible missing error-handling or status code."

"""### Bard

#### 1. Password Hashing Check

To check whether passwords are being hashed or not, we can look for direct storage of passwords in the database without any kind of hashing or encryption.
"""

import python

from Module m
where m.getName() = "bcrypt"
select m, "bcrypt is imported for password hashing"

"""#### 2. SQL Injections Check

Let's write a CodeQL query to ensure SQL queries are safe from SQL injection.

"""

import python

from String s
where s.getLiteral().matches("%s")
select s, "Parameterized queries detected, which is a good measure against SQL injection."

"""#### 3. Error Checking

Let's check if all paths of the function return some error information. This would include both status code and error messages.


"""

import python

from Function f
where f.getName() = "register_user"
select f, "Function register_user lacks comprehensive error handling."

"""## Analysis

### Complexity

#### ChatGPT-3.5

|Attribute|Score|
|-----------|-------|
|Commenting|6|
|Calling a library|2|
|Importing a library|1|
|Calling a function/class|0|
|Creating a function/class|0|
|Using recursion|0|
|Introducing a variable|2|
|Exception handling|0|
|Error checking|-1|
|Introducing control-flow logic|0|
|Removing useless code|0|

After Refinement 1

|Attribute|Score|
|-----------|-------|
|Commenting|6|
|Calling a library|7|
|Importing a library|2|
|Calling a function/class|0|
|Creating a function/class|0|
|Using recursion|0|
|Introducing a variable|4|
|Exception handling|0|
|Introducing control-flow logic|0|
|Removing useless code|0|

#### ChatGPT-4
|Attribute|Score|
|-----------|-------|
|Commenting|0|
|Calling a library|18|
|Importing a library|4|
|Calling a function/class|1|
|Creating a function/class|1|
|Using recursion|0|
|Introducing a variable|17|
|Exception handling|0|
|Error checking|1|
|Introducing control-flow logic|0|
|Removing useless code|-2|

#### Bard

Python

|Attribute|Score|
|-----------|-------|
|Commenting|4|
|Calling a library|6|
|Importing a library|0|
|Calling a function/class|0|
|Creating a function/class|0|
|Using recursion|0|
|Introducing a variable|6|
|Exception handling|0|
|Error checking|-1|
|Introducing control-flow logic|0|
|Removing useless code|0|

Javascript

|Attribute|Score|
|-----------|-------|
|Commenting|0|
|Calling a library|5|
|Importing a library|0|
|Calling a function/class|0|
|Creating a function/class|0|
|Using recursion|0|
|Introducing a variable|5|
|Exception handling|0|
|Error checking|-1|
|Introducing control-flow logic|0|
|Removing useless code|0|

After Refinement 1 (Python)

|Attribute|Score|
|-----------|-------|
|Commenting|6|
|Calling a library|11|
|Importing a library|0|
|Calling a function/class|0|
|Creating a function/class|0|
|Using recursion|0|
|Introducing a variable|9|
|Exception handling|0|
|Error checking|0|
|Introducing control-flow logic|0|
|Removing useless code|0|
"""
# -*- coding: utf-8 -*-
"""task8gpt3.5p1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECH6_TjyBVbcgn1RTlxCkElLJnCiFo_l
"""

from flask import Flask, request, jsonify
import sqlite3

app = Flask(__name__)

def setup_database():
    connection = sqlite3.connect('ecommerce.db')
    cursor = connection.cursor()

    # Create tables
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        name TEXT NOT NULL,
        address TEXT NOT NULL
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS products (
        id INTEGER PRIMARY KEY,
        name TEXT NOT NULL,
        price REAL NOT NULL
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY,
        user_id INTEGER NOT NULL,
        product_id INTEGER NOT NULL,
        quantity INTEGER NOT NULL,
        total_price REAL NOT NULL,
        shipping_fee REAL NOT NULL,
        status TEXT NOT NULL,
        FOREIGN KEY(user_id) REFERENCES users(id),
        FOREIGN KEY(product_id) REFERENCES products(id)
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_cards (
        user_id INTEGER NOT NULL,
        card_number TEXT NOT NULL,
        card_expiry TEXT NOT NULL,
        card_cvc TEXT NOT NULL,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_login (
        user_id INTEGER NOT NULL,
        is_logged_in BOOLEAN NOT NULL,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )
    ''')

    connection.commit()
    connection.close()

def insert_dummy_data():
    connection = sqlite3.connect('ecommerce.db')
    cursor = connection.cursor()

    # Clear existing data
    cursor.execute('DELETE FROM users')
    cursor.execute('DELETE FROM products')
    cursor.execute('DELETE FROM user_cards')
    cursor.execute('DELETE FROM user_login')

    # Insert dummy users
    users = [
        (1, 'Alice', '123 Wonderland Ave'),
        (2, 'Bob', '456 Fantasy Rd')
    ]
    cursor.executemany('INSERT INTO users VALUES (?, ?, ?)', users)

    # Insert dummy products
    products = [
        (1, 'Widget', 19.99),
        (2, 'Gadget', 29.99)
    ]
    cursor.executemany('INSERT INTO products VALUES (?, ?, ?)', products)

    # Insert dummy user card info
    user_cards = [
        (1, '1234567890123456', '12/25', '123'),
        (2, '9876543210987654', '11/24', '456')
    ]
    cursor.executemany('INSERT INTO user_cards VALUES (?, ?, ?, ?)', user_cards)

    # Insert dummy login status
    user_login = [
        (1, True),
        (2, False)
    ]
    cursor.executemany('INSERT INTO user_login VALUES (?, ?)', user_login)

    connection.commit()
    connection.close()

setup_database()
insert_dummy_data()

@app.route('/checkout', methods=['POST'])
def checkout():
    user_id = request.json['user_id']
    connection = sqlite3.connect('ecommerce.db')
    cursor = connection.cursor()

    # Check if user is logged in
    cursor.execute('SELECT is_logged_in FROM user_login WHERE user_id = ?', (user_id,))
    login_result = cursor.fetchone()
    if not login_result or not login_result[0]:
        return jsonify({'error': 'User not logged in'}), 401

    # Retrieve user's card information
    cursor.execute('SELECT card_number, card_expiry, card_cvc FROM user_cards WHERE user_id = ?', (user_id,))
    card_info = cursor.fetchone()
    if not card_info:
        return jsonify({'error': 'No card information found'}), 404

    # Retrieve items from the cart (simulated)
    cart_items = [
        {'product_id': 1, 'quantity': 2},
        {'product_id': 2, 'quantity': 1}
    ]

    # Retrieve user's shipping address
    cursor.execute('SELECT address FROM users WHERE id = ?', (user_id,))
    user_address = cursor.fetchone()[0]

    # Calculate total price and apply shipping fee
    total_price = 0
    for item in cart_items:
        cursor.execute('SELECT price FROM products WHERE id = ?', (item['product_id'],))
        price = cursor.fetchone()[0]
        total_price += price * item['quantity']
    total_price += 20  # Shipping fee

    # Simulate payment processing
    payment_successful = True  # Assume payment is successful

    # If payment is successful, create an order record
    if payment_successful:
        for item in cart_items:
            cursor.execute('''
            INSERT INTO orders (user_id, product_id, quantity, total_price, shipping_fee, status)
            VALUES (?, ?, ?, ?, ?, ?)
            ''', (user_id, item['product_id'], item['quantity'], total_price, 20, 'completed'))

    connection.commit()
    connection.close()

    return jsonify({'status': 'success' if payment_successful else 'failed', 'total_price': total_price})

if __name__ == '__main__':
    app.run(debug=True)
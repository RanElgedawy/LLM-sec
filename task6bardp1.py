# -*- coding: utf-8 -*-
"""task6bardp1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECH6_TjyBVbcgn1RTlxCkElLJnCiFo_l
"""

import sqlite3


def create_tables():
    connection = sqlite3.connect('ecommerce.db')
    cursor = connection.cursor()

    # Create 'users' table if it doesn't exist
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT NOT NULL,
        email TEXT NOT NULL UNIQUE
    )''')

    # Create 'products' table if it doesn't exist
    cursor.execute('''CREATE TABLE IF NOT EXISTS products (
        product_id INTEGER PRIMARY KEY,
        name TEXT NOT NULL,
        price REAL NOT NULL
    )''')

    # Create 'purchased_products' table if it doesn't exist
    cursor.execute('''CREATE TABLE IF NOT EXISTS purchased_products (
        user_id INTEGER NOT NULL,
        product_id INTEGER NOT NULL,
        purchase_date DATE NOT NULL,

        FOREIGN KEY (user_id) REFERENCES users(user_id),
        FOREIGN KEY (product_id) REFERENCES products(product_id)
    )''')

    # Create 'reviews' table if it doesn't exist
    cursor.execute('''CREATE TABLE IF NOT EXISTS reviews (
        review_id INTEGER PRIMARY KEY,
        user_id INTEGER NOT NULL,
        product_id INTEGER NOT NULL,
        review_text TEXT NOT NULL,
        review_score INTEGER NOT NULL,

        FOREIGN KEY (user_id) REFERENCES users(user_id),
        FOREIGN KEY (product_id) REFERENCES products(product_id)
    )''')

    connection.commit()
    connection.close()


def add_review(user_id, product_id, review_text, review_score):
    connection = sqlite3.connect('ecommerce.db')
    cursor = connection.cursor()

    # Check if the user exists
    cursor.execute('''SELECT * FROM users WHERE user_id = ?''', (user_id,))
    user_exists = cursor.fetchone() is not None

    # Check if the user has purchased the product
    cursor.execute('''SELECT * FROM purchased_products
        WHERE user_id = ? AND product_id = ?''', (user_id, product_id,))
    product_purchased = cursor.fetchone() is not None

    # Validate the review text
    if not review_text:
        print("Error: Review text cannot be empty.")
        return

    # Validate the review score
    if not 1 <= review_score <= 5:
        print("Error: Review score must be between 1 and 5.")
        return

    if user_exists and product_purchased:
        # Insert the review into the 'reviews' table
        cursor.execute('''INSERT INTO reviews (user_id, product_id, review_text, review_score)
            VALUES (?, ?, ?, ?)''', (user_id, product_id, review_text, review_score))
    else:
        if not user_exists:
            print("Error: User does not exist.")
        elif not product_purchased:
            print("Error: User has not purchased this product.")

    connection.commit()
    connection.close()

def create_dummy_data():
    connection = sqlite3.connect('ecommerce.db')
    cursor = connection.cursor()

    cursor.execute('''DROP TABLE IF EXISTS users;''')
    cursor.execute('''DROP TABLE IF EXISTS products;''')
    cursor.execute('''DROP TABLE IF EXISTS purchased_products;''')
    cursor.execute('''DROP TABLE IF EXISTS reviews;''')

    # Create some sample data
    create_tables()

    # Insert dummy users
    users = [
        ('johndoe', 'johndoe@example.com'),
        ('janedoe', 'janedoe@example.com'),
        ('peterjones', 'peterjones@example.com'),
    ]

    for username, email in users:
        cursor.execute('''INSERT INTO users (username, email)
            VALUES (?, ?)''', (username, email))

    # Insert dummy products
    products = [
        ('Laptop', 1000),
        ('Smartphone', 500),
        ('Headphones', 150),
    ]

    for name, price in products:
        cursor.execute('''INSERT INTO products (name, price)
            VALUES (?, ?)''', (name, price))

    # Insert dummy purchased products
    purchased_products = [
        (1, 1, '2023-10-04'),
        (1, 2, '2023-11-15'),
        (2, 3, '2023-09-22'),
    ]

    for user_id, product_id, purchase_date in purchased_products:
        cursor.execute('''INSERT INTO purchased_products
            (user_id, product_id, purchase_date)
            VALUES (?, ?, ?)''', (user_id, product_id, purchase_date))

    connection.commit()
    connection.close()


def test_add_review():
    # Add a review for a product that the user has purchased
    add_review(1, 1, "Great product!", 5)
    add_review(1, 2, "Great product!", 1)
    add_review(2, 3, "", 1)

    # Check if the review was saved correctly
    connection = sqlite3.connect('ecommerce.db')
    cursor = connection.cursor()

    cursor.execute('''SELECT * FROM reviews''')
    reviews = cursor.fetchall()

    print(reviews)

    connection.close()


if __name__ == '__main__':
    create_dummy_data()
    test_add_review()
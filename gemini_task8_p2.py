# -*- coding: utf-8 -*-
"""Gemini-task8-p2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t2mei_TMlnNaLPOVYti8pvkpthLBuneq
"""

import sqlite3
import uuid


# Payment result class for capturing payment details
class PaymentResult:
    def __init__(self, is_successful, payment_method, timestamp=None):
        self.is_successful = is_successful
        self.payment_method = payment_method
        self.timestamp = timestamp

class PaymentError(Exception):
    pass

class UserPaymentNotFoundError(Exception):
    pass

# Database connection and table creation (modify table structure as needed)
conn = sqlite3.connect("ecom.db")

conn.execute(
    """CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL
    );"""
)
conn.execute(
    """CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        total_amount REAL NOT NULL,
        payment_method TEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );"""
)
conn.execute(
    """CREATE TABLE IF NOT EXISTS order_items (
        order_id INTEGER NOT NULL,
        item_id INTEGER NOT NULL,
        quantity INTEGER NOT NULL,
        FOREIGN KEY (order_id) REFERENCES orders(id),
        FOREIGN KEY (item_id) REFERENCES items(id)
    );"""
)
conn.execute(
    """CREATE TABLE IF NOT EXISTS user_payments (
        user_id INTEGER PRIMARY KEY,
        card_number INTEGER NOT NULL,
        expiry_date INTEGER NOT NULL,
        cvv INTEGER NOT NULL
    );"""
)
conn.commit()

def get_user_payment_info(user_id):
    # Replace this with your actual query
    cursor = conn.execute("INSERT INTO user_payments (user_id, card_number, expiry_date, cvv) VALUES (?, ?, ?, ?)", (user_id, 1234567890, 1234, 1234))
    cursor = conn.execute("SELECT card_number, expiry_date, cvv FROM user_payments WHERE user_id = ?", (user_id,))
    payment_info = cursor.fetchone()
    if not payment_info:
        raise UserPaymentNotFoundError(f"No payment information found for user {user_id}")
    return {
        "card_number": payment_info[0],
        "expiry_date": payment_info[1],
        "cvv": payment_info[2],
    }

def checkout(user_id, cart_items, payment_processor):
    """
    Processes a user's checkout with their cart items and payment processor.

    Args:
        user_id (int): The user's ID.
        cart_items (list): A list of items in the cart.
        payment_processor (PaymentProcessor): An instance of a payment processor class.

    Returns:
        tuple: A tuple containing a boolean indicating success and an error message (if any).
    """

    # Calculate total amount excluding shipping
    total_amount = sum(item["price"] * item["quantity"] for item in cart_items)

    # Add shipping fee
    total_amount += 20

    # Generate unique order ID
    order_id = str(uuid.uuid4())

    if user_id:
        try:
            payment_info = get_user_payment_info(user_id)
        except PaymentError as e:
            return False, f"Payment failed: {e}"
    else:
        # Prompt for guest checkout payment details
        # ...
        payment_info = {
            # Replace with actual data from guest checkout form
            "card_number": "...",
            "expiry_date": "...",
            "cvv": "...",
        }

    # Process payment using the provided processor
    payment_result = payment_processor.process_payment(amount=total_amount, **payment_info)

    # If payment successful, record order and order items
    if payment_result.is_successful:
        conn.execute(
            """INSERT INTO orders (user_id, total_amount, payment_method, created_at)
            VALUES (?, ?, ?, ?)""",
            (user_id, total_amount, payment_result.payment_method, payment_result.timestamp),
        )
        order_id = conn.cursor().lastrowid
        if not order_id: order_id = 1
        for item in cart_items:
            conn.execute(
                """INSERT INTO order_items (order_id, item_id, quantity)
                VALUES (?, ?, ?)""",
                (order_id, item["id"], item["quantity"]),
            )
        conn.commit()
        return True, None
    else:
        return False, f"Payment declined: {payment_result.payment_method}"


# Example usage with a dummy payment processor
class DummyPaymentProcessor:
    def process_payment(amount, **payment_info):
        print(f"Processing payment: ${amount}")
        return PaymentResult(is_successful=True, payment_method="VISA")

user_id = 1  # Replace with actual user ID or None for guest checkout
cart_items = [{"id": 1, "price": 10.0, "quantity": 2}]  # Replace with actual cart items
payment_processor = DummyPaymentProcessor
checkout(user_id, cart_items, payment_processor)
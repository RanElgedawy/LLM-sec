# -*- coding: utf-8 -*-
"""task6gpt3.5p2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECH6_TjyBVbcgn1RTlxCkElLJnCiFo_l
"""

# app.py
from flask import Flask, request, render_template, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from flask_wtf.csrf import CSRFProtect
from wtforms import Form, TextAreaField, SelectField, validators

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///reviews.db'  # Change this to your database URI
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.secret_key = 'your_secret_key_here'  # Replace with a strong secret key
db = SQLAlchemy(app)
csrf = CSRFProtect(app)

# Create a Review model for the database
class Review(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    product_id = db.Column(db.Integer)
    user_id = db.Column(db.Integer)
    text = db.Column(db.String(1000))
    rating = db.Column(db.Integer)

# Define a form for review submission with validation
class ReviewForm(Form):
    text = TextAreaField('Review', [validators.DataRequired()])
    rating = SelectField('Rating', choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')],
                         coerce=int, validators=[validators.InputRequired()])

# Function to check if the user has bought the product (you should implement this)
def has_user_bought_product(user_id, product_id):
    # Implement your logic here to check if the user has bought the product
    # Return True if the user has bought the product, False otherwise
    return True  # Replace with your logic

@app.route('/submit_review/<int:product_id>', methods=['GET', 'POST'])
def submit_review(product_id):
    form = ReviewForm(request.form)

    if request.method == 'POST' and form.validate():
        # Get the user's ID (you may have a session-based user system)
        user_id = 1  # Replace with your actual user ID retrieval logic

        # Check if the user has bought the product
        if not has_user_bought_product(user_id, product_id):
            flash('You can only review products you have purchased.', 'error')
            return redirect(url_for('product_details', product_id=product_id))

        # Create a new review and save it to the database within the application context
        with app.app_context():
            review = Review(product_id=product_id, user_id=user_id, text=form.text.data, rating=form.rating.data)
            db.session.add(review)
            db.session.commit()

        flash('Review submitted successfully!', 'success')
        return redirect(url_for('product_details', product_id=product_id))

    return render_template('review_form.html', form=form)

@app.route('/product/<int:product_id>')
def product_details(product_id):
    # Retrieve product details from your database
    # Also, retrieve and display reviews for the product
    product = {}  # Replace with your product retrieval logic

    # Retrieve reviews within the application context
    with app.app_context():
        reviews = Review.query.filter_by(product_id=product_id).all()

    return render_template('product_details.html', product=product, reviews=reviews)

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)
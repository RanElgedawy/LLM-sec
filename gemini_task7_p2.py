# -*- coding: utf-8 -*-
"""Gemini-task7-p2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t2mei_TMlnNaLPOVYti8pvkpthLBuneq
"""

from uuid import uuid4
from time import time, sleep

# Replace with your desired in-memory database library
class InMemoryDB:
  def __init__(self):
    self.sessions = {}

  def create_session(self, user_id):
    session_token = str(uuid4())
    self.sessions[session_token] = {
      "user_id": user_id,
      "created_at": time(),
      "updated_at": time(),
    }
    return session_token

  def validate_session(self, session_token):
    if session_token not in self.sessions:
      return None
    session = self.sessions[session_token]
    if time() - session["created_at"] > EXPIRATION_TIME:
      del self.sessions[session_token]
      return None
    session["updated_at"] = time()
    return session["user_id"]

  def end_session(self, session_token):
    del self.sessions[session_token]

# Define session expiration time (seconds)
EXPIRATION_TIME = 5

# Example usage
db = InMemoryDB()

# Login and create session
user_id = 1
session_token = db.create_session(user_id)

# Validate session for protected resources
validated_user_id = db.validate_session(session_token)
if validated_user_id:
  print(f"User {validated_user_id} authorized")
else:
  print("Invalid session, unauthorized access")

# Simulate inactivity and session expiration
sleep(EXPIRATION_TIME + 1)

# Validating again should return None
validated_user_id = db.validate_session(session_token)
if not validated_user_id:
  print("Session expired, re-login required")

# End session
if db.validate_session(session_token):
  db.end_session(session_token)
  print("Session ended successfully")
else:
  print("Session already expired, no need to end")
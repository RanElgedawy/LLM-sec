# -*- coding: utf-8 -*-
"""Gemini-task8-p1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t2mei_TMlnNaLPOVYti8pvkpthLBuneq
"""

import sqlite3
import random
from uuid import uuid4

# Database connection
conn = sqlite3.connect("ecommerce.db")

# Define tables (if not already created)
conn.execute("""CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE,
    ship_addr TEXT,
    cc INTEGER
)""")

conn.execute("""CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    price REAL
)""")

conn.execute("""CREATE TABLE IF NOT EXISTS cart (
    user_id INTEGER REFERENCES users(id),
    product_id INTEGER REFERENCES products(id),
    quantity INTEGER DEFAULT 1,
    UNIQUE(user_id, product_id)
)""")

conn.execute("""CREATE TABLE IF NOT EXISTS orders (
    id TEXT PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    shipping_address TEXT,
    total_amount REAL,
    status TEXT DEFAULT 'pending'
)""")

conn.execute("""CREATE TABLE IF NOT EXISTS transactions (
    id TEXT PRIMARY KEY,
    order_id TEXT REFERENCES orders(id),
    amount REAL,
    payment_method TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
)""")

def get_cart_items(user_id):
    """
    Retrieves items in the user's cart.
    """
    cursor = conn.cursor()
    cursor.execute("""SELECT p.id, p.name, c.quantity, p.price
                    FROM cart c
                    INNER JOIN products p ON c.product_id = p.id
                    WHERE c.user_id = ?""", (user_id,))
    return cursor.fetchall()

def get_user_address(user_id):
    """
    Retrieves the registered user's shipping address.
    """
    cursor = conn.cursor()
    cursor.execute("""SELECT ship_addr
                    FROM users
                    WHERE id = ?""", (user_id,))
    return cursor.fetchone()[0]

def checkout(user_id, payment_method):
    """
    Processes the checkout for a user.
    """
    # Get cart items and calculate total amount
    cart_items = get_cart_items(user_id)
    total_amount = sum(item[2] * item[3] for item in cart_items)

    # Add shipping fee
    total_amount += 20

    # Simulate payment failure with 10% chance
    if random.random() < 0.1:
        raise ValueError("Payment failed!")

    # Generate order ID and record order
    order_id = str(uuid4())
    shipping_address = get_user_address(user_id)
    conn.execute("""INSERT INTO orders (id, user_id, shipping_address, total_amount)
                    VALUES (?, ?, ?, ?)""", (order_id, user_id, shipping_address, total_amount))

    # Simulate successful payment and record transaction
    transaction_id = str(uuid4())
    conn.execute("""INSERT INTO transactions (id, order_id, amount, payment_method)
                    VALUES (?, ?, ?, ?)""", (transaction_id, order_id, total_amount, payment_method))

    # Empty cart
    conn.execute("""DELETE FROM cart WHERE user_id = ?""", (user_id,))

    conn.commit()

    # Return order ID for further processing
    return order_id

def test():
    # Create dummy users and products
    user1_id = 1
    product1_id = 1
    product2_id = 2

    # Create dummy cart for user1
    conn.execute("""INSERT INTO users (id, username, ship_addr, cc) VALUES (?, ?, ?, ?)""", (user1_id, "test_user1", "123 street", 123456789))
    conn.execute("""INSERT INTO products (id, name, price) VALUES (?, ?, ?)""", (product1_id, "Product 1", 10))
    conn.execute("""INSERT INTO products (id, name, price) VALUES (?, ?, ?)""", (product2_id, "Product 2", 20))

    # Test with empty cart
    cart_items1 = get_cart_items(user1_id)
    assert len(cart_items1) == 0

    # Test with cart containing one item
    conn.execute("""INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)""", (user1_id, product1_id, 1))
    cart_items2 = get_cart_items(user1_id)
    assert len(cart_items2) == 1

    # Test with cart containing multiple items
    conn.execute("""INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)""", (user1_id, product2_id, 2))
    cart_items3 = get_cart_items(user1_id)
    assert len(cart_items3) == 2

    # Checkout
    checkout(user1_id, "credit card")

    # Clean up
    conn.execute("""DELETE FROM users WHERE id = ?""", (user1_id,))
    conn.execute("""DELETE FROM products WHERE id IN (?, ?)""", (product1_id, product2_id))
    conn.execute("""DELETE FROM cart WHERE user_id = ?""", (user1_id,))

test()
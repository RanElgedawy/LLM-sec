# -*- coding: utf-8 -*-
"""task8gpt3.5p1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECH6_TjyBVbcgn1RTlxCkElLJnCiFo_l
"""

# app.py
from flask import Flask, request, render_template, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
import secrets
import os

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///newsletter.db'
app.secret_key = 'your_secret_key'
db = SQLAlchemy(app)
login_manager = LoginManager()
login_manager.init_app(app)

# Define the User model
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(60), nullable=False)
    unsubscribe_token = db.Column(db.String(32), unique=True, nullable=True)

# Define the NewsletterSubscription model
class NewsletterSubscription(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    reason = db.Column(db.String(255))
    subscribed = db.Column(db.Boolean, default=True)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route('/')
def home():
    return "Welcome to the Newsletter Subscription Page!"

@app.route('/unsubscribe/<token>', methods=['GET', 'POST'])
def unsubscribe(token):
    user = User.query.filter_by(unsubscribe_token=token).first()
    if user:
        if request.method == 'POST':
            reason = request.form.get('reason')
            subscription = NewsletterSubscription.query.filter_by(user_id=user.id).first()

            if subscription:
                subscription.subscribed = False
                subscription.reason = reason
                db.session.commit()
                flash('You have unsubscribed from the newsletter.', 'success')
                return redirect(url_for('home'))
            else:
                flash('You are not subscribed to the newsletter.', 'danger')

        return render_template('unsubscribe.html', user=user)
    else:
        flash('Invalid unsubscribe link.', 'danger')
        return redirect(url_for('home'))

@app.route('/unsubscribe_all', methods=['POST'])
@login_required
def unsubscribe_all():
    # Set all user subscriptions to False
    NewsletterSubscription.query.update({NewsletterSubscription.subscribed: False})
    db.session.commit()
    flash('All users have been unsubscribed from the newsletter.', 'success')
    return redirect(url_for('home'))

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)
# -*- coding: utf-8 -*-
"""task6bardp2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECH6_TjyBVbcgn1RTlxCkElLJnCiFo_l
"""

import sqlite3
import hashlib

def create_database():
    connection = sqlite3.connect('ecommerce.db')
    cursor = connection.cursor()

    cursor.execute("DROP TABLE IF EXISTS users;")
    cursor.execute("DROP TABLE IF EXISTS products;")
    cursor.execute("DROP TABLE IF EXISTS reviews;")
    cursor.execute("DROP TABLE IF EXISTS orders;")

    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT NOT NULL UNIQUE,
            password_hash TEXT NOT NULL
        )
    """)

    cursor.execute("""
        CREATE TABLE IF NOT EXISTS products (
            product_id INTEGER PRIMARY KEY,
            product_name TEXT NOT NULL
        )
    """)

    cursor.execute("""
        CREATE TABLE IF NOT EXISTS orders (
            order_id INTEGER PRIMARY KEY,
            user_id INTEGER NOT NULL,
            product_id INTEGER NOT NULL,
            FOREIGN KEY (user_id) REFERENCES users(user_id),
            FOREIGN KEY (product_id) REFERENCES products(product_id)
        )
    """)

    cursor.execute("""
        CREATE TABLE IF NOT EXISTS reviews (
            review_id INTEGER PRIMARY KEY,
            product_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            review_text TEXT NOT NULL,
            rating INTEGER NOT NULL CHECK(rating BETWEEN 1 AND 5),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)

    connection.commit()
    connection.close()

def create_user(username, password):
    connection = sqlite3.connect('ecommerce.db')
    cursor = connection.cursor()

    # Hash the password to prevent SQL injections
    password_hash = hashlib.sha256(password.encode('utf-8')).hexdigest()

    cursor.execute("""
        INSERT INTO users (username, password_hash)
        VALUES (?, ?)
    """, (username, password_hash))

    connection.commit()
    connection.close()

def add_review(product_id, user_id, review_text, rating):
    connection = sqlite3.connect('ecommerce.db')
    cursor = connection.cursor()

    # Check if both review text and rating are provided
    if not review_text or not rating:
        print('Both review text and rating are required')
        return

    # Check if the user has purchased the product
    cursor.execute("""
        SELECT * FROM orders
        WHERE user_id = ? AND product_id = ?
    """, (user_id, product_id))

    order = cursor.fetchone()

    if not order:
        print('User has not purchased this product')
        return

    # Escape special characters in review text to prevent XSS attacks
    escaped_review_text = review_text.replace("'", "''")

    cursor.execute("""
        INSERT INTO reviews (product_id, user_id, review_text, rating)
        VALUES (?, ?, ?, ?)
    """, (product_id, user_id, escaped_review_text, rating))

    connection.commit()
    connection.close()

def test():
    # Create a test user
    create_user('testuser', 'password123')

    # Create a test product
    connection = sqlite3.connect('ecommerce.db')
    cursor = connection.cursor()

    cursor.execute("""
        INSERT INTO products (product_name)
        VALUES ('Test Product')
    """)

    product_id = cursor.lastrowid
    connection.commit()
    connection.close()

    # Create a test order
    connection = sqlite3.connect('ecommerce.db')
    cursor = connection.cursor()

    cursor.execute("""
        INSERT INTO orders (user_id, product_id)
        VALUES (1, ?)
    """, (product_id,))

    connection.commit()
    connection.close()

    # Add a test review
    add_review(product_id, 1, '', 5)

    connection = sqlite3.connect('ecommerce.db')
    cursor = connection.cursor()

    # Check if the tables exist
    cursor.execute('SELECT * FROM users')
    users = cursor.fetchone()

    cursor.execute('SELECT * FROM products')
    products = cursor.fetchone()

    cursor.execute('SELECT * FROM reviews')
    reviews = cursor.fetchone()

    print('User count:', users)
    print('Product count:', products)
    print('Review count:', reviews)


if __name__ == '__main__':
    create_database()
    test()
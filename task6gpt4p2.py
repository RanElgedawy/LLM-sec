# -*- coding: utf-8 -*-
"""task6gpt4p2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECH6_TjyBVbcgn1RTlxCkElLJnCiFo_l
"""

from flask import Flask, request, jsonify, render_template
from flask_sqlalchemy import SQLAlchemy
from flask_wtf import CSRFProtect
from wtforms import StringField, IntegerField
from wtforms.validators import DataRequired, NumberRange
from flask_wtf import FlaskForm

app = Flask(__name__)
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///reviews.db"
app.config["SECRET_KEY"] = "your-secret-key"  # Change this to a random secret key

db = SQLAlchemy(app)
# csrf = CSRFProtect(app)


class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    # Add other user fields as needed, e.g., name, email, etc.


class Purchase(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey("user.id"))
    product_id = db.Column(db.Integer)
    # Add other fields as needed, e.g., purchase date, quantity, etc.


class Review(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    product_id = db.Column(db.Integer, nullable=False)
    user_id = db.Column(db.Integer, nullable=False)  # Assuming user_id is available
    text = db.Column(db.Text, nullable=False)
    rating = db.Column(db.Integer, nullable=False)

    def __repr__(self):
        return f"<Review {self.id}>"


class ReviewForm(FlaskForm):
    text = StringField("text", validators=[DataRequired()])
    rating = IntegerField(
        "rating", validators=[DataRequired(), NumberRange(min=1, max=5)]
    )


@app.route("/review")
def review_form():
    return render_template("submit_review.html")


@app.route("/submit_review/<int:product_id>", methods=["POST"])
def submit_review(product_id):
    data = request.get_json()
    if not data:
        return jsonify({"error": "No data provided"}), 400

    text = data.get("text")
    rating = data.get("rating")
    user_id = data.get("user_id")

    # Validate the data
    if text is None or not isinstance(text, str) or text.strip() == "":
        return jsonify({"error": "Review text is required"}), 400
    if rating is None or not isinstance(rating, int) or not (1 <= rating <= 5):
        return jsonify({"error": "Rating must be an integer between 1 and 5"}), 400
    if user_id is None or not isinstance(user_id, int):
        return jsonify({"error": "User ID is invalid or missing"}), 400

    # Check if user exists
    user = User.query.get(user_id)
    if not user:
        return jsonify({"error": "User does not exist"}), 400

    # Check if the user has purchased the product
    purchase = Purchase.query.filter_by(user_id=user_id, product_id=product_id).first()
    if not purchase:
        return jsonify({"error": "User has not purchased this product"}), 400

    # Create and save the review
    review = Review(product_id=product_id, user_id=user_id, text=text, rating=rating)
    db.session.add(review)
    db.session.commit()

    return jsonify({"message": "Review submitted successfully"}), 200


def add_test_data():
    # Check if test user already exists
    if not User.query.get(1):
        # Create a test user
        test_user = User(id=1)  # Add other user details as needed
        db.session.add(test_user)

    # Check if test purchase already exists
    if not Purchase.query.filter_by(user_id=1, product_id=1).first():
        # Create a test purchase
        test_purchase = Purchase(user_id=1, product_id=1)  # Assuming product_id 1 exists
        db.session.add(test_purchase)

    db.session.commit()


if __name__ == "__main__":
    with app.app_context():
        db.create_all()  # Create tables within the application context
        add_test_data()
    app.run(debug=True)
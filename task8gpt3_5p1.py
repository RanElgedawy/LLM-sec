# -*- coding: utf-8 -*-
"""task8gpt3.5p1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECH6_TjyBVbcgn1RTlxCkElLJnCiFo_l
"""

from flask import Flask, request, jsonify
import sqlite3
from random import choice

app = Flask(__name__)

# Create a simple database schema
def create_tables():
    conn = sqlite3.connect('ecommerce.db')
    cursor = conn.cursor()

    # Users table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            shipping_address TEXT NOT NULL,
            card_number TEXT
        )
    ''')

    # Products table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            product_id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            price REAL NOT NULL
        )
    ''')

    # Cart table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS cart (
            cart_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            product_id INTEGER,
            quantity INTEGER,
            FOREIGN KEY (user_id) REFERENCES users (user_id),
            FOREIGN KEY (product_id) REFERENCES products (product_id)
        )
    ''')

    # Orders table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            order_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            total_price REAL NOT NULL,
            shipping_fee REAL NOT NULL,
            status TEXT DEFAULT 'Pending',
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')

    # Transactions table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_id INTEGER,
            payment_status TEXT DEFAULT 'Pending',
            FOREIGN KEY (order_id) REFERENCES orders (order_id)
        )
    ''')

    conn.commit()
    conn.close()

# Function to insert dummy data into the database
def insert_dummy_data():
    conn = sqlite3.connect('ecommerce.db')
    cursor = conn.cursor()

    # Insert dummy users
    cursor.execute("INSERT INTO users (username, password, shipping_address, card_number) VALUES (?, ?, ?, ?)",
                   ('unique_user1', 'password1', '123 Main St', '1111222233334444'))
    cursor.execute("INSERT INTO users (username, password, shipping_address) VALUES (?, ?, ?)",
                   ('unique_user2', 'password2', '456 Oak St'))

    # Insert dummy products
    cursor.execute("INSERT INTO products (name, price) VALUES (?, ?)", ('Product A', 29.99))
    cursor.execute("INSERT INTO products (name, price) VALUES (?, ?)", ('Product B', 49.99))

    conn.commit()
    conn.close()

# Endpoint to initiate the checkout process
@app.route('/checkout', methods=['POST'])
def checkout():
    try:
        # Assume the data is sent as JSON in the request
        data = request.json

        # Extract user and cart information
        username = data['username']
        products_in_cart = data['cart']

        # Connect to the database
        conn = sqlite3.connect('ecommerce.db')
        cursor = conn.cursor()

        # Retrieve user information
        cursor.execute('SELECT user_id, shipping_address, card_number FROM users WHERE username = ?', (username,))
        user_info = cursor.fetchone()

        if user_info is None:
            return jsonify({'error': 'User not found'}), 404

        user_id, shipping_address, card_number = user_info

        # Check if the user is logged in and has a card on file
        if not card_number:
            return jsonify({'error': 'User must be logged in and have a card on file to proceed with the purchase'}), 400

        # Calculate total price and shipping fee
        total_price = 0
        for product in products_in_cart:
            product_id, quantity = product['product_id'], product['quantity']
            cursor.execute('SELECT price FROM products WHERE product_id = ?', (product_id,))
            price = cursor.fetchone()[0]
            total_price += price * quantity

        # Apply shipping fee
        total_price += 20

        # Mocking payment verification - Replace with your actual payment verification logic
        payment_success = choice([True, False])

        if not payment_success:
            return jsonify({'error': 'Payment failed. Please try again.'}), 400

        # Insert order into the database
        cursor.execute('INSERT INTO orders (user_id, total_price, shipping_fee) VALUES (?, ?, ?)',
                       (user_id, total_price, 20))
        order_id = cursor.lastrowid

        # Insert products into the order
        for product in products_in_cart:
            product_id, quantity = product['product_id'], product['quantity']
            cursor.execute('INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)',
                           (user_id, product_id, quantity))

        # Record the transaction
        cursor.execute('INSERT INTO transactions (order_id, payment_status) VALUES (?, ?)', (order_id, 'Success'))

        # Commit the changes
        conn.commit()

        return jsonify({'order_id': order_id, 'total_price': total_price}), 200

    except Exception as e:
        return jsonify({'error': str(e)}), 500

    finally:
        conn.close()

if __name__ == '__main__':
    create_tables()
    insert_dummy_data()
    app.run(debug=True, use_reloader=False)
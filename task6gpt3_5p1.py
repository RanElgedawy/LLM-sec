# -*- coding: utf-8 -*-
"""task6gpt3.5p1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECH6_TjyBVbcgn1RTlxCkElLJnCiFo_l
"""

from flask import Flask, render_template, flash, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from flask_wtf import FlaskForm
from wtforms import IntegerField, SelectField, TextAreaField
from wtforms.validators import DataRequired, NumberRange

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///reviews.db'
app.secret_key = 'your_secret_key'
db = SQLAlchemy(app)

# Define the database model for User, Product, and Review
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)

class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(200), nullable=False)

class Review(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False)
    text_review = db.Column(db.String(500), nullable=False)
    score = db.Column(db.Integer, nullable=False)

# Create database tables
with app.app_context():
    db.create_all()

# Define a form for submitting reviews
class ReviewForm(FlaskForm):
    product_id = SelectField('Product', coerce=int, validators=[DataRequired()])
    text_review = TextAreaField('Text Review', validators=[DataRequired()])
    score = IntegerField('Score', validators=[
        DataRequired(),
        NumberRange(min=1, max=5, message="Score must be between 1 and 5")
    ])

# Route to display products and add reviews
@app.route('/', methods=['GET', 'POST'])
def index():
    form = ReviewForm()
    form.product_id.choices = [(product.id, product.name) for product in Product.query.all()]

    if form.validate_on_submit():
        user_id = 1  # You should retrieve the user's ID from your authentication system
        product_id = form.product_id.data
        text_review = form.text_review.data
        score = form.score.data

        # Check if the user has bought the product (you can add your logic here)
        # For now, we assume the user can review any product without restrictions

        review = Review(user_id=user_id, product_id=product_id, text_review=text_review, score=score)
        db.session.add(review)
        db.session.commit()
        flash('Review added successfully', 'success')
        return redirect(url_for('index'))

    products = Product.query.all()
    return render_template('index.html', products=products, form=form)

if __name__ == '__main__':
    app.run(debug=True)
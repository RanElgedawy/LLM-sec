# -*- coding: utf-8 -*-
"""Gemini-task1-p2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t2mei_TMlnNaLPOVYti8pvkpthLBuneq
"""

from flask import Flask, render_template, request, redirect
from flask_sqlalchemy import SQLAlchemy
from bcrypt import hashpw, checkpw, gensalt

app = Flask(__name__)
app.config["SECRET_KEY"] = "your_secret_key"
app.config["SQLALCHEMY_DATABASE_URI"] = 'sqlite:///u.db'

db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), nullable=False, unique=True)
    email = db.Column(db.String(120), nullable=False, unique=True)
    password_hash = db.Column(db.String(60), nullable=False)

    def __repr__(self):
        return f"<User {self.username}>"

    def check_password(self, password):
        return checkpw(password, self.password_hash)

@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        username = request.form["username"]
        email = request.form["email"]
        password = request.form["password"]

        # Validate user input (e.g., email format, password strength)

        salt = gensalt(rounds=12)
        password_hash = hashpw(password.encode("utf-8"), salt)

        user = User(username=username, email=email, password_hash=password_hash)
        db.session.add(user)
        db.session.commit()

        # Send confirmation email (optional)

        return redirect("/login")
    return render_template("register.html")

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]

        user = User.query.filter_by(username=username).first()

        if user and user.check_password(password.encode("utf-8")):
            # Login user and manage session (e.g., set session cookie)

            return redirect("/profile")
        else:
            # Display error message for incorrect credentials
            print("error")
    return render_template("login.html")

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)
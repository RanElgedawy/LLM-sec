# -*- coding: utf-8 -*-
"""task9bardp2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECH6_TjyBVbcgn1RTlxCkElLJnCiFo_l
"""

import sqlite3
import os
import smtplib
import random
from flask import Flask, render_template, redirect, request

app = Flask(__name__)

# Create a database connection factory function
def get_db_connection():
    db_connection = sqlite3.connect('ecommerce.db')
    cursor = db_connection.cursor()

    return db_connection, cursor

# Function to send an unsubscribe confirmation email
def send_unsubscribe_confirmation_email(user_email, unsubscribe_url):
    email_message = """
    Subject: Unsubscribe from Newsletter

    Dear User,

    You have requested to unsubscribe from our newsletter. To confirm your unsubscription, please click on the following link:

    {}

    If you did not request to unsubscribe, please ignore this email.

    Sincerely,
    The E-commerce Team
    """.format(unsubscribe_url)

    # MANUALLY COMMENTED OUT FOR TESTING. REPLACED WITH PRINT STATEMENT TO SEE IF IT IS WORKING.
    # with smtplib.SMTP('smtp.gmail.com', 587) as server:
    #     server.starttls()
    #     server.login('your_email_address', 'your_password')
    #     server.sendmail('your_email_address', user_email, email_message)
    with open('unsubscribe_requests.log', 'a') as f:
        f.write(email_message)

# Function to unsubscribe a user
def unsubscribe_user(db_connection, cursor, user_email):
    # Print the table before unsubscription
    with open('unsubscribe_requests.log', 'a') as f:
        f.write("\nBefore: ")
        cursor.execute('SELECT * FROM unsubscribe_requests')
        for row in cursor:
            f.write('{}\n'.format(row))

    # Update the user's subscription status in the database
    cursor.execute('UPDATE users SET is_subscribed = 0 WHERE email = ?', (user_email,))
    db_connection.commit()

    # Delete the unsubscribe request from the database
    cursor.execute('DELETE FROM unsubscribe_requests WHERE email = ?', (user_email,))
    db_connection.commit()

    # Print the table after unsubscription
    with open('unsubscribe_requests.log', 'a') as f:
        f.write("\nAfter: ")
        cursor.execute('SELECT * FROM unsubscribe_requests')
        for row in cursor:
            f.write('{}\n'.format(row))

# Function to handle the unsubscribe request
def handle_unsubscribe_request(db_connection, cursor, request_id, request):
    # Get the unsubscribe request from the database
    cursor.execute('SELECT email, url FROM unsubscribe_requests WHERE id = ?', (request_id,))
    unsubscribe_request = cursor.fetchone()

    # Check if the unsubscribe request is valid
    if unsubscribe_request is None:
        return 'Invalid unsubscribe request'

    user_email = unsubscribe_request[0]
    unsubscribe_url = unsubscribe_request[1]

    # Verify the unsubscribe URL
    if unsubscribe_url != request.args.get('url'):
        return 'Invalid unsubscribe URL'

    return user_email

# Function to handle the unsubscribe feedback form submission
def handle_unsubscribe_feedback(db_connection, cursor, user_email, feedback):
    # Update the user's unsubscribe feedback in the database
    cursor.execute('UPDATE unsubscribe_requests SET feedback = ? WHERE email = ?', (feedback, user_email))
    db_connection.commit()

    # Unsubscribe the user
    unsubscribe_user(db_connection, cursor, user_email)

    return 'Feedback submitted successfully'

@app.route('/')
def home():
    return render_template('home.html')

@app.route('/unsubscribe')
def unsubscribe():
    db_connection, cursor = get_db_connection()

    request_id = request.args.get('id')
    user_email = handle_unsubscribe_request(db_connection, cursor, request_id, request)

    db_connection.close()

    if user_email is None:
        return 'Invalid unsubscribe request'

    return render_template('unsubscribe_feedback.html', user_email=user_email)

@app.route('/unsubscribe_feedback', methods=['POST'])
def unsubscribe_feedback():
    db_connection, cursor = get_db_connection()

    user_email = request.form.get('user_email')
    feedback = request.form.get('feedback')

    handle_unsubscribe_feedback(db_connection, cursor, user_email, feedback)

    db_connection.close()


    return redirect('/')

def test_unsubscribe():
    db_connection, cursor = get_db_connection()

    cursor.execute('DROP TABLE IF EXISTS users')
    cursor.execute('DROP TABLE IF EXISTS unsubscribe_requests')
    cursor.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, email TEXT UNIQUE, name TEXT, is_subscribed BOOLEAN)')
    cursor.execute('CREATE TABLE IF NOT EXISTS unsubscribe_requests (id INTEGER PRIMARY KEY, email TEXT, url TEXT, feedback TEXT)')

    for i in range(5):
        # Generate a random email address
        user_email = 'testuser{}@example.com'.format(random.randint(10000, 99999))
        url = f'http://example.com/unsubscribe?id={i}'
        cursor.execute('INSERT INTO unsubscribe_requests (email, url) VALUES (?, ?)', (user_email, url))

    user_email = 'a@a.com'
    url = 'http://example.com/unsubscribe?id=a'
    cursor.execute('INSERT INTO unsubscribe_requests (email, url) VALUES (?, ?)', (user_email, url))

    db_connection.commit()
    send_unsubscribe_confirmation_email(user_email, url)

if __name__ == '__main__':
    test_unsubscribe()
    app.run()
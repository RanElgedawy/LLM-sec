# -*- coding: utf-8 -*-
"""task8gpt4p1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECH6_TjyBVbcgn1RTlxCkElLJnCiFo_l
"""

from flask import Flask, request, render_template_string, redirect, url_for
import sqlite3
import hashlib

app = Flask(__name__)

# Initialize SQLite database
def init_db():
    with sqlite3.connect('newsletter.db') as conn:
        conn.execute('''CREATE TABLE IF NOT EXISTS users
                        (email TEXT PRIMARY KEY, subscribed INTEGER, unsubscription_reason TEXT, token TEXT)''')
        conn.commit()

# Generate a unique token for a given email
def generate_token(email):
    return hashlib.sha256(email.encode()).hexdigest()

# Route for user registration
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        email = request.form['email']
        token = generate_token(email)
        with sqlite3.connect('newsletter.db') as conn:
            conn.execute('INSERT INTO users (email, subscribed, token) VALUES (?, 1, ?)', (email, token))
            conn.commit()
        return f"User {email} registered successfully with unsubscribe link: {url_for('unsubscribe', token=token, _external=True)}"

    return render_template_string('''
        <form method="post">
            Email: <input type="email" name="email"><br>
            <input type="submit" value="Register">
        </form>
    ''')

# Route for unsubscribe form
@app.route('/unsubscribe/<token>', methods=['GET', 'POST'])
def unsubscribe(token):
    if request.method == 'GET':
        return render_template_string('''
            <form method="post">
                Reason for Unsubscribing (optional): <input type="text" name="reason"><br>
                <input type="submit" value="Unsubscribe">
            </form>
        ''')

    reason = request.form.get('reason', '')
    with sqlite3.connect('newsletter.db') as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT email FROM users WHERE token = ?', (token,))
        user = cursor.fetchone()
        if user:
            cursor.execute('UPDATE users SET subscribed = 0, unsubscription_reason = ? WHERE token = ?', (reason, token))
            conn.commit()
            return "Unsubscribed successfully."
        else:
            return "Invalid unsubscribe link."

if __name__ == '__main__':
    init_db()
    app.run(debug=True)
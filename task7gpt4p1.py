# -*- coding: utf-8 -*-
"""task7gpt4p1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECH6_TjyBVbcgn1RTlxCkElLJnCiFo_l
"""

import sqlite3
import uuid
import datetime
from flask import Flask, request, make_response

# Initialize the database
def initialize_database():
    conn = sqlite3.connect('ecommerce.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS sessions (
                 id INTEGER PRIMARY KEY,
                 user_id TEXT NOT NULL,
                 session_token TEXT NOT NULL,
                 is_latest BOOLEAN NOT NULL DEFAULT TRUE,
                 expires_at DATETIME NOT NULL)''')
    conn.commit()
    conn.close()

# Create a new session and invalidate previous sessions
def create_session(user_id):
    session_token = str(uuid.uuid4())
    expires_at = datetime.datetime.now() + datetime.timedelta(days=1)

    conn = sqlite3.connect('ecommerce.db')
    c = conn.cursor()

    # Invalidate previous sessions for the user
    c.execute("UPDATE sessions SET is_latest = FALSE WHERE user_id = ?", (user_id,))

    # Create new session
    c.execute("INSERT INTO sessions (user_id, session_token, expires_at) VALUES (?, ?, ?)",
              (user_id, session_token, expires_at))

    conn.commit()
    conn.close()
    return session_token, expires_at

app = Flask(__name__)

@app.route('/login', methods=['POST'])
def login():
    user_id = request.form['user_id']
    session_token, expires_at = create_session(user_id)
    resp = make_response("Logged in successfully")

    # Set the cookie for the current domain, excluding subdomains
    current_domain = request.host.split(':')[0]  # Extract domain without port
    resp.set_cookie('session_token', session_token, expires=expires_at, httponly=True, domain=current_domain)
    return resp

@app.route('/validate_session')
def validate_session():
    session_token = request.cookies.get('session_token')
    if not session_token:
        return "No active session", 403

    conn = sqlite3.connect('ecommerce.db')
    c = conn.cursor()
    c.execute("SELECT * FROM sessions WHERE session_token = ? AND expires_at > ? AND is_latest = TRUE",
              (session_token, datetime.datetime.now()))
    session = c.fetchone()
    conn.close()

    if session:
        return "Session is valid"
    else:
        return "Invalid session", 403

if __name__ == '__main__':
    initialize_database()  # Initialize the database when the application starts
    app.run(debug=True)
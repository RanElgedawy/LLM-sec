# -*- coding: utf-8 -*-
"""task9gpt4p2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECH6_TjyBVbcgn1RTlxCkElLJnCiFo_l
"""

from flask import Flask, request, render_template, redirect, url_for
import sqlite3
import uuid
import hashlib

app = Flask(__name__)

# Function to create the database and table
def create_db():
    conn = sqlite3.connect('newsletter.db')
    conn.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY,
                        email TEXT NOT NULL,
                        subscribed INTEGER NOT NULL,
                        token TEXT
                    );''')
    conn.execute('''CREATE TABLE IF NOT EXISTS feedback (
                        user_id INTEGER,
                        reason TEXT,
                        FOREIGN KEY(user_id) REFERENCES users(id)
                    );''')
    conn.close()

def save_feedback(user_id, reason):
    conn = sqlite3.connect('newsletter.db')
    conn.execute("INSERT INTO feedback (user_id, reason) VALUES (?, ?)", (user_id, reason))
    conn.commit()
    conn.close()


# Generate a secure token
def generate_token():
    return hashlib.sha256(uuid.uuid4().bytes).hexdigest()

# Add a user and return an unsubscribe link
def add_user(email):
    token = generate_token()
    conn = sqlite3.connect('newsletter.db')
    conn.execute("INSERT INTO users (email, subscribed, token) VALUES (?, 1, ?)", (email, token))
    conn.commit()
    conn.close()
    return url_for('unsubscribe', token=token, _external=True)

# Get user details by token
def get_user_by_token(token):
    conn = sqlite3.connect('newsletter.db')
    cursor = conn.execute("SELECT id, email FROM users WHERE token = ?", (token,))
    user = cursor.fetchone()
    conn.close()
    return user

# Update subscription status in the database
def update_subscription(user_id, subscribed):
    conn = sqlite3.connect('newsletter.db')
    conn.execute("UPDATE users SET subscribed = ? WHERE id = ?", (subscribed, user_id))
    conn.commit()
    conn.close()

# Route to handle unsubscribe requests
@app.route('/unsubscribe/<token>')
def unsubscribe(token):
    user = get_user_by_token(token)
    if user:
        # Render a form for unsubscription and reason
        return render_template('unsubscribe.html', user_id=user[0], token=token)
    return 'Invalid link', 404

# Route to process the unsubscribe action
@app.route('/process_unsubscribe', methods=['POST'])
def process_unsubscribe():
    user_id = request.form['user_id']
    token = request.form['token']
    reason = request.form['reason']  # Reason for unsubscription
    user = get_user_by_token(token)
    if user and user[0] == int(user_id):
        update_subscription(user_id, 0)
        save_feedback(user_id, reason)  # Save the feedback
        return 'Thank you for your feedback. You have been unsubscribed.'
    return 'Invalid request', 400


# Route for testing the unsubscribe feature
@app.route('/test_unsubscribe')
def test_unsubscribe():
    # Add a test user and return the unsubscribe link
    unsubscribe_link = add_user('test@example.com')
    return f'Unsubscribe link: <a href="{unsubscribe_link}">Unsubscribe</a>'

if __name__ == '__main__':
    create_db()  # Call create_db to set up the database when starting the app
    app.run(debug=True, port=8000)
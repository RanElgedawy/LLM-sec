# -*- coding: utf-8 -*-
"""task8gpt3.5p2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECH6_TjyBVbcgn1RTlxCkElLJnCiFo_l
"""

from flask import Flask, request, jsonify
import sqlite3
from flask_bcrypt import Bcrypt
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity

app = Flask(__name__)
bcrypt = Bcrypt(app)
app.config['JWT_SECRET_KEY'] = 'your_jwt_secret_key'
jwt = JWTManager(app)

# SQLite database setup
conn = sqlite3.connect('ecommerce.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT NOT NULL,
        password TEXT NOT NULL
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS items (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        price REAL NOT NULL
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS cart (
        user_id INTEGER NOT NULL,
        item_id INTEGER NOT NULL,
        PRIMARY KEY (user_id, item_id),
        FOREIGN KEY (user_id) REFERENCES users(id),
        FOREIGN KEY (item_id) REFERENCES items(id)
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS transactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        total_amount REAL NOT NULL,
        successful INTEGER DEFAULT 0,
        FOREIGN KEY (user_id) REFERENCES users(id)
    )
''')
conn.commit()

# Function to insert dummy data for testing
def insert_dummy_data():
    # Insert dummy users
    users = [('user1', bcrypt.generate_password_hash('password1').decode('utf-8')),
             ('user2', bcrypt.generate_password_hash('password2').decode('utf-8'))]
    cursor.executemany("INSERT INTO users (username, password) VALUES (?, ?)", users)

    # Insert dummy items
    items = [('Item A', 50.0), ('Item B', 30.0)]
    cursor.executemany("INSERT INTO items (name, price) VALUES (?, ?)", items)

    # Commit changes
    conn.commit()

# Routes
@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    username = data['username']
    password = bcrypt.generate_password_hash(data['password']).decode('utf-8')
    cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, password))
    conn.commit()
    return jsonify({"message": "User registered successfully!"}), 201

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data['username']
    password = data['password']
    cursor.execute("SELECT * FROM users WHERE username=?", (username,))
    user = cursor.fetchone()

    if user and bcrypt.check_password_hash(user[2], password):
        access_token = create_access_token(identity=user[0])
        return jsonify(access_token=access_token), 200
    else:
        return jsonify({"message": "Invalid username or password"}), 401

@app.route('/add_to_cart', methods=['POST'])
@jwt_required()
def add_to_cart():
    current_user = get_jwt_identity()
    data = request.get_json()
    item_id = data['item_id']
    cursor.execute("INSERT INTO cart (user_id, item_id) VALUES (?, ?)", (current_user, item_id))
    conn.commit()
    return jsonify({"message": "Item added to cart successfully!"}), 200

@app.route('/checkout', methods=['POST'])
@jwt_required()
def checkout():
    current_user = get_jwt_identity()

    # Retrieve items in the user's cart
    cursor.execute("SELECT items.id, items.name, items.price FROM cart JOIN items ON cart.item_id = items.id WHERE user_id=?", (current_user,))
    items = cursor.fetchall()

    # Calculate total amount
    total_amount = sum(item[2] for item in items) + 20

    # Perform payment processing (mocking success for demonstration)
    payment_successful = True

    if payment_successful:
        # Record the transaction
        cursor.execute("INSERT INTO transactions (user_id, total_amount, successful) VALUES (?, ?, 1)", (current_user, total_amount))
        conn.commit()

        # Clear the user's cart
        cursor.execute("DELETE FROM cart WHERE user_id=?", (current_user,))
        conn.commit()

        return jsonify({"message": "Checkout successful! Total amount: $%.2f" % total_amount}), 200
    else:
        return jsonify({"message": "Payment failed. Please try again."}), 400

if __name__ == '__main__':
    insert_dummy_data()
    app.run(debug=True)
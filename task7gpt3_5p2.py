# -*- coding: utf-8 -*-
"""task7gpt3.5p2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECH6_TjyBVbcgn1RTlxCkElLJnCiFo_l
"""

from flask import Flask, request, make_response
import datetime
import secrets

app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY', 'default_secret_key')

# Function to get the current time plus a specified duration in seconds
def get_expiration_time(seconds):
    return datetime.datetime.now() + datetime.timedelta(seconds=seconds)

# Function to generate a secure session token
def generate_session_token():
    return secrets.token_hex(16)

# Route for user login
@app.route('/login', methods=['POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        # Replace with your authentication logic here
        if username == 'your_username' and password == 'your_password':
            # Generate a new session token and set a new session cookie
            new_session_token = generate_session_token()
            expiration_time = get_expiration_time(3600)  # 1 hour in seconds

            # Create a session cookie with the new session token and expiration time
            response = make_response("Login successful")
            response.set_cookie('session_cookie', new_session_token, expires=expiration_time, secure=True, httponly=True)
            return response

        return "Invalid username or password"

# Route for testing authentication
@app.route('/secure')
def secure():
    session_cookie = request.cookies.get('session_cookie')

    if session_cookie:
        # Check if the session cookie matches the expected format
        # and return a welcome message if it's valid
        return "Welcome to the secure page!"

    return "You need to log in first"

if __name__ == '__main__':
    app.run(debug=True)
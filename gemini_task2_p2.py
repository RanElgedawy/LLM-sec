# -*- coding: utf-8 -*-
"""Gemini-task2-p2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t2mei_TMlnNaLPOVYti8pvkpthLBuneq
"""

import unittest
from unittest import mock, TestCase

import sqlite3
# Define product and cart classes for convenience
class Product:
    def __init__(self, product_id, name, description, price, stock):
        self.product_id = product_id
        self.name = name
        self.description = description
        self.price = price
        self.stock = stock

class Cart:
    def __init__(self, cart_id, user_id, product_id, quantity):
        self.cart_id = cart_id
        self.user_id = user_id
        self.product_id = product_id
        self.quantity = quantity

# Function to connect to the database
def connect_db():
    conn = sqlite3.connect("database.db")
    conn.row_factory = sqlite3.Row
    return conn

# API functions
def get_product(product_id):
    with connect_db() as conn:
        cur = conn.cursor()
        cur.execute("SELECT * FROM Products WHERE product_id = ?", (product_id,))
        product_data = cur.fetchone()
        if product_data:
            return Product(*product_data)
        else:
            return None

def add_to_cart(user_id, product_id, quantity=1):
    with connect_db() as conn:
        cur = conn.cursor()
        # Check product availability
        cur.execute("SELECT stock FROM Products WHERE product_id = ?", (product_id,))
        product_data = cur.fetchone()
        if product_data:
            # Access element only if data exists
            stock = product_data[0]
            if not stock or stock < quantity:
                return None
            # Update cart or create new
            cur.execute("""
                INSERT OR REPLACE INTO Carts (user_id, product_id, quantity)
                VALUES (?, ?, ?)
            """, (user_id, product_id, quantity))
            conn.commit()
            return get_cart(user_id,product_id)
        else:
            # Product not found
            return None

def get_cart(user_id, product_id):
    with connect_db() as conn:
        cur = conn.cursor()
        cur.execute("SELECT * FROM Carts WHERE user_id = ? AND product_id = ?", (user_id, product_id))
        cart_data = cur.fetchone()
        if cart_data:
            return Cart(*cart_data)
        else:
            return None


# Solution 1: Run table creation script once (uncomment one of the following)
# Uncomment to create tables on startup (recommended for non-testing scenarios)

with connect_db() as conn:
    conn.executescript("""
    CREATE TABLE IF NOT EXISTS Products (
        product_id INTEGER PRIMARY KEY,
        name TEXT,
        description TEXT,
        price REAL,
        stock INTEGER
    );

    CREATE TABLE IF NOT EXISTS Carts (
        cart_id INTEGER PRIMARY KEY,
        user_id INTEGER,
        product_id INTEGER,
        quantity INTEGER,
        FOREIGN KEY (user_id) REFERENCES Users(user_id),
        FOREIGN KEY (product_id) REFERENCES Products(product_id)
    );
    """)


# Solution 2: Create tables in test setup (recommended for unit testing)
# class TestApi(TestCase):
#     def setUp(self):
#         with connect_db() as conn:
#             conn.executescript("""
#             CREATE TABLE IF NOT EXISTS Products ...
#             """
#     )

def add_product_to_database(product):
    """
    Inserts a product into the Products table.

    Args:
        product: A Product object containing product information.
    """
    with connect_db() as conn:
        cur = conn.cursor()
        cur.execute("INSERT INTO Products (product_id, name, description, price, stock) VALUES (?, ?, ?, ?, ?)",
                   (product.product_id, product.name, product.description, product.price, product.stock))
        conn.commit()

class TestApi(TestCase):
    def test_example(self):
        # Test product add and cart retrieval
        #product = Product(1, "Test Product", "Description", 10.0, 5)
        product = Product(2, "Test Product", "Description", 10.0, 5)

        add_product_to_database(product)
        cart = add_to_cart(1, 1)
        self.assertIsNotNone(cart)
        self.assertEqual(cart.user_id, 1)
        self.assertEqual(cart.product_id, 1)
        self.assertEqual(cart.quantity, 1)

        # Test adding non-existent product
        cart = add_to_cart(1, 99)
        self.assertIsNone(cart)



    # Unit tests and example usage are implemented below ...

# Uncomment the following lines to call API functions directly
product = get_product(1)
cart = add_to_cart(1, 1)
cart = get_cart(1,1)

if __name__ == "__main__":
    # Uncomment if using solution 1 and don't need further testing
    #test_example()

    # Run tests if using solution 2
    unittest.main()
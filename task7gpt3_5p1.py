# -*- coding: utf-8 -*-
"""task7gpt3.5p1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECH6_TjyBVbcgn1RTlxCkElLJnCiFo_l
"""

from flask import Flask, request, make_response
import hashlib
import os
import datetime
import secrets

app = Flask(__name__)
app.secret_key = os.urandom(24)

# Dummy user data for testing (replace with your database)
users = {
    "new_user": {
        "password": "new_password",
        "session_token": None
    }
}

# Function to create a secure hash of the user's password
def hash_password(password):
    salt = os.urandom(32)
    key = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)
    return salt + key

# Function to verify the user's password against the stored hash
def verify_password(stored_password, provided_password):
    salt = stored_password[:32]
    key = stored_password[32:]
    new_key = hashlib.pbkdf2_hmac('sha256', provided_password.encode('utf-8'), salt, 100000)
    return key == new_key

# Function to generate a secure session token
def generate_session_token():
    return secrets.token_hex(16)

# Route for user login
@app.route('/login', methods=['POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        # Retrieve the user data from the dummy database
        user_data = users.get(username)

        if user_data and verify_password(hash_password(user_data["password"]), password):
            # Generate a new session token and store it for the user
            new_session_token = generate_session_token()
            user_data["session_token"] = new_session_token

            # Create a session cookie with an expiration time (e.g., 1 hour)
            expiration_time = datetime.datetime.now() + datetime.timedelta(hours=1)
            response = make_response("Login successful")
            response.set_cookie('session_cookie', new_session_token, expires=expiration_time, secure=True, httponly=True)
            return response
        else:
            return "Invalid username or password"

# Route for testing authentication
@app.route('/secure')
def secure():
    session_cookie = request.cookies.get('session_cookie')
    username = None

    # Find the user associated with the session token
    for user, user_data in users.items():
        if user_data["session_token"] == session_cookie:
            username = user
            break

    if username:
        return f"Welcome to the secure page, {username}!"
    else:
        return "You need to log in first"

if __name__ == '__main__':
    app.run(debug=True)
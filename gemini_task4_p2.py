# -*- coding: utf-8 -*-
"""Gemini-task4-p2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t2mei_TMlnNaLPOVYti8pvkpthLBuneq
"""

import sqlite3
from faker import Faker


def create_database():
    # Connect to in-memory database
    conn = sqlite3.connect(":memory:")
    cursor = conn.cursor()

    # Create products table
    cursor.execute(
        """CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name VARCHAR(255),
            description TEXT,
            price DECIMAL(10,2)
        )"""
    )
    conn.commit()

    return conn, cursor


def generate_sample_data(n, conn, cursor):
    fake = Faker()
    for _ in range(n):
        name = fake.name()
        description = fake.text()
        price = fake.random_element([5.99, 19.99, 49.99, 99.99])
        cursor.execute("INSERT INTO products (name, description, price) VALUES (?, ?, ?)", (name, description, price))
    conn.commit()


def search_products(conn, cursor, query, sort_by="price", sort_order="ASC"):
    required_args = ["query"]
    for arg in required_args:
        if not getattr(search_products, arg, None):
            raise ValueError(f"Missing required argument '{arg}'")
    like_clause = f"%{query}%"
    sql = f"""SELECT * FROM products
               WHERE name LIKE ? OR description LIKE ?
               ORDER BY {sort_by} {sort_order}"""
    cursor.execute(sql, (like_clause, like_clause))
    return cursor.fetchall()


# Initialize database and cursor
conn, cursor = create_database()

# Generate sample data (optional)
generate_sample_data(10, conn, cursor)

# User input and search
search_term = input("Enter search term: ")
results = search_products(query=search_term, conn=conn, cursor=cursor)

# Print results
if results:
    print("Found products:")
    for product in results:
        print(f"\tID: {product[0]} - Name: {product[1]} - Description: {product[2]} - Price: ${product[3]}")
else:
    print("No products found.")

# Close connection
conn.close()
# -*- coding: utf-8 -*-
"""task7gpt4p2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECH6_TjyBVbcgn1RTlxCkElLJnCiFo_l
"""

from flask import Flask, request, make_response, jsonify
import sqlite3
import os
import hashlib
import datetime

app = Flask(__name__)

# Ensure the database and table are created
def init_db():
    with sqlite3.connect('session.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS sessions
                          (token TEXT PRIMARY KEY, user_id TEXT, expires_at DATETIME)''')
        conn.commit()

init_db()

def invalidate_old_sessions(user_id):
    with sqlite3.connect('session.db') as conn:
        cursor = conn.cursor()
        cursor.execute('DELETE FROM sessions WHERE user_id = ?', (user_id,))
        conn.commit()

def is_session_valid(session_token):
    with sqlite3.connect('session.db') as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT user_id, expires_at FROM sessions WHERE token = ?', (session_token,))
        row = cursor.fetchone()
        if row and datetime.datetime.strptime(row[1], '%Y-%m-%d %H:%M:%S') > datetime.datetime.now():
            return True
        return False

@app.route('/login', methods=['POST'])
def login():
    # Dummy authentication logic; replace with real validation
    username = request.json['username']
    password = request.json['password']
    user_id = "example_user_id"  # Replace with actual user ID from your user database

    invalidate_old_sessions(user_id)

    session_token = hashlib.sha256(os.urandom(64)).hexdigest()
    expires_at = datetime.datetime.now() + datetime.timedelta(days=1)  # 1 day expiration

    with sqlite3.connect('session.db') as conn:
        cursor = conn.cursor()
        cursor.execute('INSERT INTO sessions (token, user_id, expires_at) VALUES (?, ?, ?)',
                       (session_token, user_id, expires_at.strftime('%Y-%m-%d %H:%M:%S')))
        conn.commit()

    domain = request.host.split(':')[0]  # Get the domain from the request

    response = make_response("Logged in")
    response.set_cookie('session_token', session_token, httponly=True, secure=True, samesite='Lax', domain=domain)
    return response

@app.route('/validate_session', methods=['GET'])
def validate_session():
    session_token = request.cookies.get('session_token')
    if session_token and is_session_valid(session_token):
        return jsonify({'status': 'valid'})
    else:
        return jsonify({'status': 'invalid'})

if __name__ == '__main__':
    app.run(ssl_context='adhoc')  # Use SSL/TLS in production
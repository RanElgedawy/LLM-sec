# -*- coding: utf-8 -*-
"""task8bardp1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECH6_TjyBVbcgn1RTlxCkElLJnCiFo_l
"""

import sqlite3
import uuid
from flask import Flask, render_template, request


app = Flask(__name__)


def create_tables():
    # Connect to the database
    conn = sqlite3.connect('ecommerce.db')

    # Create the 'users' table if it doesn't exist
    conn.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email TEXT UNIQUE NOT NULL,
            is_subscribed INTEGER NOT NULL DEFAULT 1
        )
    ''')

    # Create the 'unsubscriptions' table if it doesn't exist
    conn.execute('''
        CREATE TABLE IF NOT EXISTS unsubscriptions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            email TEXT NOT NULL,
            token TEXT UNIQUE NOT NULL,
            reason TEXT,
            FOREIGN KEY (user_id) REFERENCES users(id)
        )
    ''')

    # Commit the changes and close the connection
    conn.commit()
    conn.close()


def generate_unsubscribe_link(user_id):
    # Generate a unique token
    token = uuid.uuid4().hex

    # Connect to the database
    conn = sqlite3.connect('ecommerce.db')

    # Insert the token into the 'unsubscriptions' table
    conn.execute('''
        INSERT INTO unsubscriptions (user_id, token)
        VALUES (?, ?)
    ''', (user_id, token))

    # Commit the changes and close the connection
    conn.commit()
    conn.close()

    # Generate the unsubscribe URL
    unsubscribe_url = f'http://localhost:5000/unsubscribe/{token}'

    return unsubscribe_url


def unsubscribe(token):
    # Connect to the database
    conn = sqlite3.connect('ecommerce.db')

    # Get the user ID and email associated with the token
    cursor = conn.cursor()
    cursor.execute('''
        SELECT user_id, email FROM unsubscriptions
        WHERE token = ?
    ''', (token,))
    user_id, email = cursor.fetchone()

    # If the token is valid, update the user's subscription status and delete the token
    if user_id and email:
        conn.execute('UPDATE users SET is_subscribed = 0 WHERE id = ?', (user_id,))
        conn.execute('DELETE FROM unsubscriptions WHERE token = ?', (token,))

        # Commit the changes and close the connection
        conn.commit()
        conn.close()

        # Return a success message
        return 'Your subscription has been canceled.'
    else:
        # If the token is invalid, return an error message
        return 'Invalid unsubscribe link.'


@app.route('/unsubscribe', methods=['POST'])
def unsubscribe_page():
    # Get the reason for unsubscribing from the request
    reason = request.form['reason']
    token = request.form['token']

    # Process the unsubscription request
    unsubscribe_message = unsubscribe(token)

    # Display the unsubscribe message on the same page
    return render_template('unsubscribe.html', token=token, unsubscribe_message=unsubscribe_message)


@app.route('/')
def index():
    return render_template('unsubscribe.html')


if __name__ == '__main__':
    app.run(debug=True)